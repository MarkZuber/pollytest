#
# Djinni CMake Configuration
#

set(
    DJINNI_CMAKE_SOURCES
    ${JSON11_SOURCES}
    api.cpp
)

if(TOOLCHAIN_ADDITIONAL_SOURCES)
    set(
        DJINNI_CMAKE_SOURCES
        ${DJINNI_CMAKE_SOURCES}
        ${TOOLCHAIN_ADDITIONAL_SOURCES}
    )
endif(TOOLCHAIN_ADDITIONAL_SOURCES)

if(${LIBRARY_TYPE} STREQUAL "Static")
    add_library(${TARGET_DJINNI_CMAKE} STATIC ${DJINNI_CMAKE_SOURCES})
else(${LIBRARY_TYPE} STREQUAL "Static")
    add_library(${TARGET_DJINNI_CMAKE} SHARED ${DJINNI_CMAKE_SOURCES})
endif(${LIBRARY_TYPE} STREQUAL "Static")

target_include_directories(
    ${TARGET_DJINNI_CMAKE}
    PRIVATE ${JSON11_INCLUDE_DIRS}
)

if(TOOLCHAIN_ADDITIONAL_INCLUDE_DIRS)
    target_include_directories(
        ${TARGET_DJINNI_CMAKE}
        PRIVATE ${TOOLCHAIN_ADDITIONAL_INCLUDE_DIRS}
    )
endif(TOOLCHAIN_ADDITIONAL_INCLUDE_DIRS)

target_link_libraries(
    ${TARGET_DJINNI_CMAKE}
    ${CMAKE_THREAD_LIBS_INIT}
)

if(TOOLCHAIN_ADDITIONAL_COMPILE_OPTIONS)
    target_compile_options(
        ${TARGET_DJINNI_CMAKE}
        PRIVATE ${TOOLCHAIN_ADDITIONAL_COMPILE_OPTIONS}
    )
endif(TOOLCHAIN_ADDITIONAL_COMPILE_OPTIONS)

install(
    TARGETS ${TARGET_DJINNI_CMAKE}
    LIBRARY DESTINATION ${PROJECT_LIBRARY_OUTPUT_DIRECTORY}
    ARCHIVE DESTINATION ${PROJECT_ARCHIVE_OUTPUT_DIRECTORY}
)
